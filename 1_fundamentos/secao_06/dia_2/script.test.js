// ðŸš€ ExercÃ­cio 1

// A funÃ§Ã£o myRemove(arr, item) recebe um array arr e retorna uma cÃ³pia desse array sem o elemento item, caso ele exista no array:
// Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado;

// Verifique se a chamada myRemove([1, 2, 3, 4], 3) nÃ£o retorna o array [1, 2, 3, 4];

// Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado.

const myRemove = require('/home/user/trybe/trybe-exercicios/1_fundamentos/secao_06/dia_2/script.js');

describe('ExercÃ­cio 1 - FunÃ§Ã£o myRemove', () => {
    it('Deve retornar um array removendo o Ã­tem correto', () => {
        expect(myRemove([1, 2, 3, 4], 3)).toEqual([1, 2, 4]);
        expect(myRemove([1, 2, 3, 4], 3)).not.toEqual([1, 2, 3, 4]);
        expect(myRemove([1, 2, 3, 4], 5)).toEqual([1, 2, 3, 4]);
    });
});

// ðŸš€ ExercÃ­cio 2

// A funÃ§Ã£o myFizzBuzz(num) recebe um nÃºmero num como parÃ¢metro. Caso num seja um nÃºmero divisÃ­vel por 3 e 5, a funÃ§Ã£o retorna "fizzbuzz". 
// Caso num seja um nÃºmero divisÃ­vel apenas por 3, retorna "fizz". 
// E caso num seja um nÃºmero divisÃ­vel apenas por 5, retorna "buzz". 
// Se num for um nÃºmero que nÃ£o Ã© divisÃ­vel nem por 3 e nem por 5, a funÃ§Ã£o retorna o prÃ³prio nÃºmero num. 
// Caso num nÃ£o seja um nÃºmero, a funÃ§Ã£o retorna false.

// Execute a funÃ§Ã£o myFizzBuzz(num), sendo num um nÃºmero divisÃ­vel por 3 e 5, e verifique se o retorno Ã© o esperado.

// Execute a funÃ§Ã£o myFizzBuzz(num), sendo num um nÃºmero divisÃ­vel por 3, e verifique se o retorno Ã© o esperado.

// Execute a funÃ§Ã£o myFizzBuzz(num), sendo num um nÃºmero divisÃ­vel por 5, e verifique se o retorno Ã© o esperado.

// Execute a funÃ§Ã£o myFizzBuzz(num), sendo num um nÃºmero que nÃ£o Ã© divisÃ­vel por 3 ou 5, e verifique se o retorno Ã© o esperado.

// Execute a funÃ§Ã£o myFizzBuzz(num), sendo num um parÃ¢metro que nÃ£o Ã© um nÃºmero, e verifique se o retorno Ã© o esperado.

const myFizzBuzz = require('/home/user/trybe/trybe-exercicios/1_fundamentos/secao_06/dia_2/script.js');

describe('ExercÃ­cio 2 - FunÃ§Ã£o myFizzBuzz', () => {
    it ('Verifica, se de acordo com o parÃ¢metro recebido, retorna o valor esperado', () => {
        expect(myFizzBuzz(15)).toEqual("fizzbuzz");
        expect(myFizzBuzz(9)).toEqual("fizz");
        expect(myFizzBuzz(25)).toEqual("buzz");
        expect(myFizzBuzz(13)).toEqual(13);
        expect(myFizzBuzz('num')).toEqual(false);
    });
});

// ðŸš€ ExercÃ­cio 3

// Para as funÃ§Ãµes encode e decode, crie os seguintes testes em Jest:
// Teste se encode e decode sÃ£o funÃ§Ãµes; OK
// Para a funÃ§Ã£o encode, teste se as vogais a, e, i, o, u sÃ£o convertidas em 1, 2, 3, 4 e 5, respectivamente; OK
// Para a funÃ§Ã£o decode, teste se os nÃºmeros 1, 2, 3, 4 e 5 sÃ£o convertidos nas vogais a, e, i, o, u, respectivamente; OK
// Teste se as demais letras/nÃºmeros nÃ£o sÃ£o convertidos para cada caso; ????
// Teste se a string que Ã© retornada pelas funÃ§Ãµes tem o mesmo nÃºmero de caracteres que a string passada como parÃ¢metro. ok

const encode = require('/home/user/trybe/trybe-exercicios/1_fundamentos/secao_06/dia_2/script.js');
const decode = require('/home/user/trybe/trybe-exercicios/1_fundamentos/secao_06/dia_2/script.js');

describe('ExercÃ­cio 3 - FunÃ§Ãµes encode e decode', () => {
    it ('Encode Ã© uma funÃ§Ã£o', () => {
        expect(typeof encode).toEqual('function');
    });
    it ('Decode Ã© uma funÃ§Ã£o', () => {
        expect(typeof decode).toEqual('function');
    });
    it ('Na funÃ§Ã£o encode a vogal a Ã© convertida em 1', () => {
        expect(encode('a')).toEqual('1');
    });
    it ('Na funÃ§Ã£o encode a vogal e Ã© convertida em 2', () => {
        expect(encode('e')).toEqual('2');
    });
    it ('Na funÃ§Ã£o encode a vogal i Ã© convertida em 3', () => {
        expect(encode('i')).toEqual('3');
    });
    it ('Na funÃ§Ã£o encode a vogal o Ã© convertida em 4', () => {
        expect(encode('o')).toEqual('4');
    });
    it ('Na funÃ§Ã£o encode a vogal u Ã© convertida em 5', () => {
        expect(encode('u')).toEqual('5');
    });
    it ('Na funÃ§Ã£o decode o nÃºmero 1 Ã© convertido em a', () => {
        expect(decode('1')).toEqual('a');
    });
    it ('Na funÃ§Ã£o decode o nÃºmero 2 Ã© convertido em e', () => {
        expect(decode('2')).toEqual('e');
    });
    it ('Na funÃ§Ã£o decode o nÃºmero 3 Ã© convertido em i', () => {
        expect(decode('3')).toEqual('i');
    });
    it ('Na funÃ§Ã£o decode o nÃºmero 4 Ã© convertido em o', () => {
        expect(decode('4')).toEqual('o');
    });
    it ('Na funÃ§Ã£o decode o nÃºmero 5 Ã© convertido em u', () => {
        expect(decode('5')).toEqual('u');
    });
    it ('Verifica se a palavra Trybe tem o mesmo nÃºmero de caracteres', () => {
        expect(decode('Trybe').length).toEqual(5);
        expect(encode('Trybe').length).toEqual(5);
    });
});

// ðŸš€ ExercÃ­cio 4
// Ã‰ importante nunca alterar os testes ou as variÃ¡veis jÃ¡ escritas no cÃ³digo.

const techList = require('/home/user/trybe/trybe-exercicios/1_fundamentos/secao_06/dia_2/script.js');

describe('Testa a funÃ§Ã£o techList', () => {
  it('Testa se a funÃ§Ã£o techList Ã© definida', () => {
    expect(techList).toBeDefined();
  });
  it('Testa se techList Ã© uma funÃ§Ã£o', () => {
    expect(typeof techList).toBe('function');
  });
  it('Lista com 5 tecnologias deve retornar uma lista de objetos ordenados', () => {
    expect(techList(['React', 'Jest', 'HTML', 'CSS', 'JavaScript'], 'Lucas')).toEqual([
      {
        tech: 'CSS',
        name: 'Lucas'
      },
      {
        tech: 'HTML',
        name: 'Lucas'
      },
      {
        tech: 'JavaScript',
        name: 'Lucas'
      },
      {
        tech: 'Jest',
        name: 'Lucas'
      },
      {
        tech: 'React',
        name: 'Lucas'
      }
    ]);
  });
  it('Lista com 0 tecnologias deve retornar uma mensagem de erro "Vazio!"', () => {
    expect(techList([], 'Lucas')).toBe('Vazio!');
  });
});

