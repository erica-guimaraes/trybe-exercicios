// üöÄ Exerc√≠cio 1

// A fun√ß√£o myRemove(arr, item) recebe um array arr e retorna uma c√≥pia desse array sem o elemento item, caso ele exista no array:
// Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado;

// Verifique se a chamada myRemove([1, 2, 3, 4], 3) n√£o retorna o array [1, 2, 3, 4];

// Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado.

const myRemove = require('/home/user/trybe/trybe-exercicios/1_fundamentos/secao_06/dia_2/script.js');

describe('Exerc√≠cio 1 - Fun√ß√£o myRemove', () => {
    it('Deve retornar um array removendo o √≠tem correto', () => {
        expect(myRemove([1, 2, 3, 4], 3)).toEqual([1, 2, 4]);
        expect(myRemove([1, 2, 3, 4], 3)).not.toEqual([1, 2, 3, 4]);
        expect(myRemove([1, 2, 3, 4], 5)).toEqual([1, 2, 3, 4]);
    });
});

// üöÄ Exerc√≠cio 2

// A fun√ß√£o myFizzBuzz(num) recebe um n√∫mero num como par√¢metro. Caso num seja um n√∫mero divis√≠vel por 3 e 5, a fun√ß√£o retorna "fizzbuzz". 
// Caso num seja um n√∫mero divis√≠vel apenas por 3, retorna "fizz". 
// E caso num seja um n√∫mero divis√≠vel apenas por 5, retorna "buzz". 
// Se num for um n√∫mero que n√£o √© divis√≠vel nem por 3 e nem por 5, a fun√ß√£o retorna o pr√≥prio n√∫mero num. 
// Caso num n√£o seja um n√∫mero, a fun√ß√£o retorna false.

// Execute a fun√ß√£o myFizzBuzz(num), sendo num um n√∫mero divis√≠vel por 3 e 5, e verifique se o retorno √© o esperado.

// Execute a fun√ß√£o myFizzBuzz(num), sendo num um n√∫mero divis√≠vel por 3, e verifique se o retorno √© o esperado.

// Execute a fun√ß√£o myFizzBuzz(num), sendo num um n√∫mero divis√≠vel por 5, e verifique se o retorno √© o esperado.

// Execute a fun√ß√£o myFizzBuzz(num), sendo num um n√∫mero que n√£o √© divis√≠vel por 3 ou 5, e verifique se o retorno √© o esperado.

// Execute a fun√ß√£o myFizzBuzz(num), sendo num um par√¢metro que n√£o √© um n√∫mero, e verifique se o retorno √© o esperado.

const myFizzBuzz = require('/home/user/trybe/trybe-exercicios/1_fundamentos/secao_06/dia_2/script.js');

describe('Exerc√≠cio 2 - Fun√ß√£o myFizzBuzz', () => {
    it ('Verifica, se de acordo com o par√¢metro recebido, retorna o valor esperado', () => {
        expect(myFizzBuzz(15)).toBe("fizzbuzz");
        expect(myFizzBuzz(9)).toBe("fizz");
        expect(myFizzBuzz(25)).toBe("buzz");
        expect(myFizzBuzz(13)).toBe(13);
        expect(myFizzBuzz('num')).toBe(false);
    });
});

// üöÄ Exerc√≠cio 3

// Para as fun√ß√µes encode e decode, crie os seguintes testes em Jest:
// Teste se encode e decode s√£o fun√ß√µes;
// Para a fun√ß√£o encode, teste se as vogais a, e, i, o, u s√£o convertidas em 1, 2, 3, 4 e 5, respectivamente;
// Para a fun√ß√£o decode, teste se os n√∫meros 1, 2, 3, 4 e 5 s√£o convertidos nas vogais a, e, i, o, u, respectivamente;
// Teste se as demais letras/n√∫meros n√£o s√£o convertidos para cada caso;
// Teste se a string que √© retornada pelas fun√ß√µes tem o mesmo n√∫mero de caracteres que a string passada como par√¢metro.